sources <- read.csv("Sources.csv")
################################# Open Street Map Data ###############################
BoundingBox <- osmdata::getbb("Eindhoven")
#OSM all universities and public transport options
University <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='amenity', value = 'university', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
Library <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='amenity', value = 'library', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
Supermarket <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='shop', value = 'supermarket', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
Bus <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='highway', value = 'bus_stop', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
#####Combining all types of shapes#####
#####University#####
UniversityPolygons <- University$osm_polygons %>%
select(osm_id, name) %>%
drop_na(name)
UniversityPolygons %>%
write_sf('UniversityPolygons.shp', driver = 'ESRI Shapefile')
UniversityPolygonsShapefile <- read_sf('UniversityPolygons.shp')
# ####NULL in this case####
# UniversityMultipolygons <- University$osm_multipolygons %>%
#   select_(osm_id, name) %>%
#   drop_na(name)
# UniversityMultipolygons %>%
#   write_sf('UniversityMultipolygons.shp', driver = 'ESRI Shapefile')
# UniversityMultipolygonsShaoefile <- read_sf('UniversityMultipolygons.shp')
# UniversityPoints <- University$osm_points %>%
#   select(osm_id, name) %>%
#   drop_na(name)
####Library####
LibraryPoints <- Library$osm_points %>%
select(osm_id, name) %>%
drop_na
# ###NULL in this case####
# LibraryPolygons <- Library$osm_polygons %>%
#   select(osm_id, name) %>%
#   drop_na(name)
# LibraryPolygons %>%
#   write_sf('LibraryPolygons.shp', driver = 'ESRI Shapefile')
# LibraryPolygonsShapefile <- read_sf('LibraryPolygons.shp')
# LibraryMultipolygons <- Library$osm_multipolygons %>%
#   select_(osm_id, name) %>%
#   drop_na(name)
# LibraryMultipolygons %>%
#   write_sf('LibraryMultipolygons.shp', driver = 'ESRI Shapefile')
# LibraryMultipolygonsShaoefile <- read_sf('LibraryMultipolygons.shp')
######Supermarket######
SupermarketPoints <- Supermarket$osm_points %>%
select(osm_id, name) %>%
drop_na(name)
# ######NULL in this case#####
# SupermarketPolygons <- Supermarket$osm_polygons %>%
#   select(osm_id, name) %>%
#   drop_na(name)
# SuperMarketPolygons %>%
#   write_sf('SupermarketPolygons.shp', driver = 'ESRI Shapefile')
# SupermarketPolygonsShapefile <- read_sf('SupermarketPolygons.shp')
# SupermarketMultipolygons <- Supermarket$osm_multipolygons %>%
#   select_(osm_id, name) %>%
#   drop_na(name)
# SupermarketMultipolygons %>%
#   write_sf('SupermarketMultipolygons.shp', driver = 'ESRI Shapefile')
# SupermarketMultipolygonsShaoefile <- read_sf('SupermarketMultipolygons.shp')
#####Bus#######
BusPoints <- Bus$osm_points %>%
select(osm_id, name) %>%
drop_na(name)
# ######NULL in this case####
# BusPolygons <- Bus$osm_polygons %>%
#   select(osm_id, name) %>%
#   drop_na(name)
# BusPolygons %>%
#   write_sf('BusPolygons.shp', driver = 'ESRI Shapefile')
# BusPolygonsShapefile <- read_sf('BusPolygons.shp')
# BusMultipolygons <- Bus$osm_multipolygons %>%
#   select_(osm_id, name) %>%
#   drop_na(name)
# BusMultipolygons %>%
#   write_sf('BusMultipolygons.shp', driver = 'ESRI Shapefile')
# BusMultipolygonsShaoefile <- read_sf('BusMultipolygons.shp')
r = 0.009
pal <- colorFactor(c("blue", "green", "orange", "red"), domain = c("University", "Library", "Supermarket", "Bus"))
library(AMR)
library(data.table)
library(DT)
library(ggridges)
library(ggplot2)
library(inlmisc)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(plotly)
library(qicharts2)
library(rintrojs)
library(shiny)
library(shinyBS)
library(shinycssloaders)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(sp)
library(survival)
library(ggpubr)
library(survminer)
library(tidyverse)
library(viridis)
library(zoo)
library(jsonlite)
library(nominatim)
library(tidygeocoder)
library(osmdata)
library(sf)
library(geojsonio)
library(cld2)
library(magrittr)
library(htmlwidgets)
library(htmltools)
library(franc)
library(cbsodataR)
library(shinythemes)
library(readr)
library(dodgr)
library(shinyMatrix)
library(streamgraph)
runApp('BEP/CTFv2.1-nl')
##############DATA TRANSFORMATION##############
data4 <- read.csv("data/04-inschrijvingen-wo-2019.csv", sep= ',')
data4hbo <- read.csv("data/04-inschrijvingen-hbo-2019.csv", sep = ';')
HOadr <- read.csv("data/01-instellingen-hbo-en-wo.csv", sep = ';')
data4 <- read.csv("data/04-inschrijvingen-wo-2019.csv", sep= ',')
data4hbo <- read.csv("data/04-inschrijvingen-hbo-2019.csv", sep = ';')
HOadr <- read.csv("data/01-instellingen-hbo-en-wo.csv", sep = ';')
runApp('BEP/CTFv2.1-nl')
View(data4)
runApp('BEP/CTFv2.1-nl')
View(data4)
runApp('BEP/CTFv2.1-nl')
library(AMR)
library(data.table)
library(DT)
library(ggridges)
library(ggplot2)
library(inlmisc)
library(lubridate)
library(leaflet)
library(leaflet.extras)
library(plotly)
library(qicharts2)
library(rintrojs)
library(shiny)
library(shinyBS)
library(shinycssloaders)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(sp)
library(survival)
library(ggpubr)
library(survminer)
library(tidyverse)
library(viridis)
library(zoo)
library(jsonlite)
library(nominatim)
library(tidygeocoder)
library(osmdata)
library(sf)
library(geojsonio)
library(cld2)
library(magrittr)
library(htmlwidgets)
library(htmltools)
library(franc)
library(cbsodataR)
library(shinythemes)
library(readr)
library(dodgr)
library(shinyMatrix)
library(streamgraph)
L_market <- read.csv("83811NED_TypedDataSet_29032021_140503.csv")
L_market <- read.csv("83811NED_TypedDataSet_29032021_140503.csv", sep= ',')
setwd("~/BEP/CTFv2.2-nl")
L_market <- read.csv("83811NED_TypedDataSet_29032021_140503.csv", sep= ',')
L_market <- read.csv("data/83811NED_TypedDataSet_29032021_140503.csv", sep= ',')
View(L_market)
L_market <- read.csv("data/83811NED_TypedDataSet_29032021_140503.csv", sep= ';')
head(L_market)
#Gender
L_market$Geslacht[L_market$Geslacht == "T001038"] <- "Totaal"
L_market$Geslacht[L_market$Geslacht == "3000"] <- "Mannen"
L_market$Geslacht[L_market$Geslacht == "4000"] <- "Vrouwen"
#Persoons kenmerken
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "1012600"] <- "Nederlandse achtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "2012655"] <- "Westerse migratieachtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "2012657"] <- "Niet-westerse migratieachtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "2012659"] <- "Onbekende migratieachtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "T001040"] <- "Totaal"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "A048134"] <- "Internationale student"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "A048133"] <- "Geen internationale student"
#Uitstromers Ho Met En Zonder Diploma
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A028566"] <- "Totaal"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A025294"] <- "Hoger beroepsonderwijs"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043048"] <- "Hbo zonder hbo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043047"] <- "Hbo met hbo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A028669"] <- "Hbo-associate degree"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043049"] <- "Hbo-bachelor"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043050"] <- "Hbo-master"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A025297"] <- "Wetenschappelijk onderwijs"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043053"] <- "Wo zonder wo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043052"] <- "Wo met wo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043054"] <- "Wo-bachelor"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043055"] <- "Wo-master"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043056"] <- "Wo-vervolgopleiding"
#Arbeidsmarktpositie
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "T001242"] <- "Totaal"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028813"] <- "Met werk, zonder uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028814"] <- "Met werk, met uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028815"] <- "Zonder werk, met uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028816"] <- "Zonder werk, zonder uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A043837"] <- "Terug in onderwijs"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A043838"] <- "Onbekend: niet in BRP"
#Studierichting
L_market$Studierichting[L_market$Studierichting == "T001332"] <- "Totaal"
L_market$Studierichting[L_market$Studierichting == "A042609"] <- "Onderwijs"
L_market$Studierichting[L_market$Studierichting == "A042610"] <- "Landbouw en natuurlijke omgeving"
L_market$Studierichting[L_market$Studierichting == "A042611"] <- "Natuur"
L_market$Studierichting[L_market$Studierichting == "A042612"] <- "Techniek"
L_market$Studierichting[L_market$Studierichting == "A042613"] <- "Gezondheidszorg"
L_market$Studierichting[L_market$Studierichting == "A042614"] <- "Economie"
L_market$Studierichting[L_market$Studierichting == "A042615"] <- "Recht"
L_market$Studierichting[L_market$Studierichting == "A042616"] <- "Gedrag en Maatschappij"
L_market$Studierichting[L_market$Studierichting == "A042617"] <- "Taal en cultuur"
L_market$Studierichting[L_market$Studierichting == "A042618"] <- "Sectoroverstijgend"
#Peilmoment
L_market$Peilmoment[L_market$Peilmoment == "A029077"] <- "Direct na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029078"] <- "1 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029079"] <- "2 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029080"] <- "3 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029081"] <- "4 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029082"] <- "5 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A048144"] <- "10 jaar na verlaten onderwijs"
#Years
L_market$Perioden[L_market$Perioden == "2014SJ00"] <- "2014/2015"
L_market$Perioden[L_market$Perioden == "2015SJ00"] <- "2015/2016"
L_market$Perioden[L_market$Perioden == "2016SJ00"] <- "2016/2017"
L_market$Perioden[L_market$Perioden == "2017SJ00"] <- "2017/2018"
setwd("~/BEP/CheckTheFacts-main")
# Install dependencies
source('dependencies.R')
##############DATA TRANSFORMATION##############
data4 <- read.csv("data/04-inschrijvingen-wo-2019.csv", sep= ',')
data4hbo <- read.csv("data/04-inschrijvingen-hbo-2019.csv", sep = ';')
HOadr <- read.csv("data/01-instellingen-hbo-en-wo.csv", sep = ';')
L_market <- read.csv("data/83811NED_TypedDataSet_29032021_140503.csv", sep= ';')
#Gender
L_market$Geslacht[L_market$Geslacht == "T001038"] <- "Totaal"
L_market$Geslacht[L_market$Geslacht == "3000"] <- "Mannen"
L_market$Geslacht[L_market$Geslacht == "4000"] <- "Vrouwen"
#Persoons kenmerken
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "1012600"] <- "Nederlandse achtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "2012655"] <- "Westerse migratieachtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "2012657"] <- "Niet-westerse migratieachtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "2012659"] <- "Onbekende migratieachtergrond"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "T001040"] <- "Totaal"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "A048134"] <- "Internationale student"
L_market$Persoonskenmerken[L_market$Persoonskenmerken == "A048133"] <- "Geen internationale student"
#Uitstromers Ho Met En Zonder Diploma
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A028566"] <- "Totaal"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A025294"] <- "Hoger beroepsonderwijs"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043048"] <- "Hbo zonder hbo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043047"] <- "Hbo met hbo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A028669"] <- "Hbo-associate degree"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043049"] <- "Hbo-bachelor"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043050"] <- "Hbo-master"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A025297"] <- "Wetenschappelijk onderwijs"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043053"] <- "Wo zonder wo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043052"] <- "Wo met wo-diploma"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043054"] <- "Wo-bachelor"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043055"] <- "Wo-master"
L_market$UitstromersHoMetEnZonderDiploma[L_market$UitstromersHoMetEnZonderDiploma == "A043056"] <- "Wo-vervolgopleiding"
#Arbeidsmarktpositie
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "T001242"] <- "Totaal"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028813"] <- "Met werk, zonder uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028814"] <- "Met werk, met uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028815"] <- "Zonder werk, met uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A028816"] <- "Zonder werk, zonder uitkering"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A043837"] <- "Terug in onderwijs"
L_market$Arbeidsmarktpositie[L_market$Arbeidsmarktpositie == "A043838"] <- "Onbekend: niet in BRP"
#Studierichting
L_market$Studierichting[L_market$Studierichting == "T001332"] <- "Totaal"
L_market$Studierichting[L_market$Studierichting == "A042609"] <- "Onderwijs"
L_market$Studierichting[L_market$Studierichting == "A042610"] <- "Landbouw en natuurlijke omgeving"
L_market$Studierichting[L_market$Studierichting == "A042611"] <- "Natuur"
L_market$Studierichting[L_market$Studierichting == "A042612"] <- "Techniek"
L_market$Studierichting[L_market$Studierichting == "A042613"] <- "Gezondheidszorg"
L_market$Studierichting[L_market$Studierichting == "A042614"] <- "Economie"
L_market$Studierichting[L_market$Studierichting == "A042615"] <- "Recht"
L_market$Studierichting[L_market$Studierichting == "A042616"] <- "Gedrag en Maatschappij"
L_market$Studierichting[L_market$Studierichting == "A042617"] <- "Taal en cultuur"
L_market$Studierichting[L_market$Studierichting == "A042618"] <- "Sectoroverstijgend"
#Peilmoment
L_market$Peilmoment[L_market$Peilmoment == "A029077"] <- "Direct na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029078"] <- "1 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029079"] <- "2 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029080"] <- "3 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029081"] <- "4 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A029082"] <- "5 jaar na verlaten onderwijs"
L_market$Peilmoment[L_market$Peilmoment == "A048144"] <- "10 jaar na verlaten onderwijs"
#Years
L_market$Perioden[L_market$Perioden == "2014SJ00"] <- "2014/2015"
L_market$Perioden[L_market$Perioden == "2015SJ00"] <- "2015/2016"
L_market$Perioden[L_market$Perioden == "2016SJ00"] <- "2016/2017"
L_market$Perioden[L_market$Perioden == "2017SJ00"] <- "2017/2018"
#temporary list
temp <- c("Tilburg University", "Universiteit van Amsterdam", "Erasmus University Rotterdam","Eindhoven University of Technology", " Delft University of Technology", "Leiden University", "Wageningen University", "Maastricht University", "University of Groningen", "University of Twente")
data <- data.frame(
year=rep(seq(2015,2019) , each=54),
name=rep(temp , 27),
value=sample( seq(200,400,1) , 270, replace = T)
)
#####GET CBS DATA + PDOK boundaries#######
# metadata <- cbs_get_meta("84583NED")
# print(metadata$DataProperties$Key)
#
# WBwaarde <- cbs_get_data("84583NED",
#                          select=c("WijkenEnBuurten","GemiddeldeWoningwaarde_35")) %>%
#                            mutate(WijkenEnBuurten = str_trim(WijkenEnBuurten),
#                                   WOZ = GemiddeldeWoningwaarde_35)
#
#
# WBpop <-cbs_get_data("84583NED",
#                      select=c("WijkenEnBuurten","AantalInwoners_5")) %>%
#   mutate(WijkenEnBuurten = str_trim(WijkenEnBuurten),
#          population = AantalInwoners_5)
#
# WBrent <-cbs_get_data("84583NED",
#                       select=c("WijkenEnBuurten","HuurwoningenTotaal_41")) %>%
#   mutate(WijkenEnBuurten = str_trim(WijkenEnBuurten),
#          value = HuurwoningenTotaal_41)
#
# # Retrieve data with municipal boundaries from PDOK
# municipalBoundaries <- st_read("https://geodata.nationaalgeoregister.nl/cbsgebiedsindelingen/wfs?request=GetFeature&service=WFS&version=2.0.0&typeName=cbs_gemeente_2019_gegeneraliseerd&outputFormat=json")
#
#
# # Link data from Statistics Netherlands to geodata
# WBwaarde <-
#   municipalBoundaries %>%
#   left_join(WBwaarde, by=c(statcode="WijkenEnBuurten"))
#
# WBpop <-
#   municipalBoundaries %>%
#   left_join(WBpop, by=c(statcode="WijkenEnBuurten"))
#
# WBrent <-
#   municipalBoundaries %>%
#   left_join(WBrent, by=c(statcode="WijkenEnBuurten"))
#
# #convert because the format is wrong
# WBwaarde <- st_transform(WBwaarde, "+proj=longlat +datum=WGS84")
# WBpop <- st_transform(WBpop, "+proj=longlat +datum=WGS84")
# WBrent <- st_transform(WBrent, "+proj=longlat +datum=WGS84")
#
#
# # Choose a color palette and assign it to the values
# colorbins1 <- colorBin("YlOrRd", domain = WBwaarde$WOZ, 5, pretty = TRUE)
# colorbins2 <- colorBin("Blues", domain = WBpop$population, 9, pretty = TRUE)
# colorbins3 <- colorBin("Greens", domain = WBrent$value, 5, pretty = TRUE)
#
# # Create HTML labels for tooltip
# tooltip1 <- sprintf("<strong>%s</strong><br/> Average housing value: %.1i"
#                     ,WBwaarde$statnaam
#                     ,WBwaarde$WOZ
# ) %>% lapply(htmltools::HTML)
#
# tooltip2 <- sprintf("<strong>%s</strong><br/> Population: %.1i"
#                     ,WBpop$statnaam
#                     ,WBpop$population
# ) %>% lapply(htmltools::HTML)
#
# tooltip3 <- sprintf("<strong>%s</strong><br/> Rental property percent: %.1f%%"
#                     ,WBrent$statnaam
#                     ,WBrent$value
# ) %>% lapply(htmltools::HTML)
# #
#########DUO WO########
data4 <- pivot_longer(data4, cols = starts_with("X20"), values_to = "Registered", names_to = "Jaar", values_drop_na = TRUE)
data4 %>% mutate_if(is.factor, as.character) -> data4
data4 <- mutate(data4, Jaar = as.integer(gsub("X", "", Jaar)))
data4$OPLEIDINGSNAAM.ACTUEEL <- as.character(data4$OPLEIDINGSNAAM.ACTUEEL)
data4$CROHO.ONDERDEEL <- as.character(data4$CROHO.ONDERDEEL)
data4$GEMEENTENAAM <- as.character(data4$GEMEENTENAAM)
data4$Taal <- detect_language(data4$OPLEIDINGSNAAM.ACTUEEL, plain_text = TRUE)
data4$Taal[is.na(data4$Taal) == TRUE] <- "en/nl"
data4$Taal[data4$Taal != 'en'] <- "en/nl"
########DUO HBO#########
data4hbo <- pivot_longer(data4hbo, cols = starts_with("X20"), values_to = "Registered", names_to = "Jaar", values_drop_na = TRUE)
data4hbo %>% mutate_if(is.factor, as.character) -> data4hbo
data4hbo <- mutate(data4hbo, Jaar = as.integer(gsub("X", "", Jaar)))
data4hbo$OPLEIDINGSNAAM.ACTUEEL <- as.character(data4hbo$OPLEIDINGSNAAM.ACTUEEL)
data4hbo$CROHO.ONDERDEEL <- as.character(data4hbo$CROHO.ONDERDEEL)
data4hbo$GEMEENTENAAM <- as.character(data4hbo$GEMEENTENAAM)
data4hbo$Taal <- detect_language(data4hbo$OPLEIDINGSNAAM.ACTUEEL, plain_text = TRUE)
data4hbo$Taal[is.na(data4hbo$Taal) == TRUE] <- "en/nl"
data4hbo$Taal[data4hbo$Taal != 'en'] <- "en/nl"
####DUO UNIVERSITY ADRESSES####
HOadr$Full_Address<- paste(HOadr$STRAATNAAM, HOadr$HUISNUMMER.TOEVOEGING, HOadr$PLAATSNAAM, sep =" ")
HOadr$StreetN <- paste(HOadr$STRAATNAAM, HOadr$HUISNUMMER.TOEVOEGING, sep = " ")
HOadr$GEMEENTENAAM <- as.character(HOadr$GEMEENTENAAM)
HO_locations <- HOadr %>%
geocode(street = StreetN, city = GEMEENTENAAM, country = 'Nederland', method = 'osm')
#####JOIN######
data4$HO.type <- 'WO'
data4hbo$HO.type <- 'HBO'
data4 <- rbind(data4, data4hbo)
#Rename column INSTELLINGSNAAM to join data
colnames(data4)[which(names(data4) == "INSTELLINGSNAAM.ACTUEEL")] <- "INSTELLINGSNAAM"
#Rename Universiteit Maastricht to Maastricht University
HO_locations$INSTELLINGSNAAM[HO_locations$INSTELLINGSNAAM == "Universiteit Maastricht"] <- "Maastricht University"
data4 <- merge(data4,HO_locations,by="INSTELLINGSNAAM")
labs <- lapply(seq(nrow(data4)), function(i) {
paste0( '<p>', data4[i, "INSTELLINGSNAAM"], '<p></p>',
data4[i, "Full_Address"], ', ',
data4[i, "GEMEENTENAAM.x"],'</p><p>',
data4[i, "INTERNETADRES"], '</a>' )
})
profiles <- data.frame(c("Cultuur en Maatschappij","Economie en Maatschappij ", "Natuur en Gezondheid", "Natuur en Techniek"), fix.empty.names = F)
# HELP + sources Information ---------------------------------------------------------------
help <- read_csv2("help.csv")
sources <- read.csv("Sources.csv")
################################# Open Street Map Data ###############################
BoundingBox <- osmdata::getbb("Eindhoven")
#OSM all universities and public transport options
University <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='amenity', value = 'university', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
Library <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='amenity', value = 'library', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
Supermarket <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='shop', value = 'supermarket', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
Bus <- opq(bbox = BoundingBox) %>%
add_osm_feature(key ='highway', value = 'bus_stop', value_exact = T) %>%
osmdata_sf(quiet = FALSE) %>%
unique_osmdata()
#####Combining all types of shapes#####
#####University#####
UniversityPolygons <- University$osm_polygons %>%
select(osm_id, name) %>%
drop_na(name)
UniversityPolygons %>%
write_sf('UniversityPolygons.shp', driver = 'ESRI Shapefile')
UniversityPolygonsShapefile <- read_sf('UniversityPolygons.shp')
# ####NULL in this case####
# UniversityMultipolygons <- University$osm_multipolygons %>%
#   select_(osm_id, name) %>%
#   drop_na(name)
# UniversityMultipolygons %>%
#   write_sf('UniversityMultipolygons.shp', driver = 'ESRI Shapefile')
# UniversityMultipolygonsShaoefile <- read_sf('UniversityMultipolygons.shp')
# UniversityPoints <- University$osm_points %>%
#   select(osm_id, name) %>%
#   drop_na(name)
####Library####
LibraryPoints <- Library$osm_points %>%
select(osm_id, name) %>%
drop_na
######Supermarket######
SupermarketPoints <- Supermarket$osm_points %>%
select(osm_id, name) %>%
drop_na(name)
#####Bus#######
BusPoints <- Bus$osm_points %>%
select(osm_id, name) %>%
drop_na(name)
r = 0.009
pal <- colorFactor(c("blue", "green", "orange", "red"), domain = c("University", "Library", "Supermarket", "Bus"))
View(L_market)
runApp()
setwd("~/BEP/CheckTheFacts-main")
runApp()
View(data4)
View(data4)
View(L_market)
L_market <- L_market %>% drop_na("UitstromersHo_1")
View(L_market)
runApp()
View(L_market)
runApp()
runApp()
runApp()
runApp()
runApp()
typeof(L_market$Perioden)
typeof(L_market$Geslacht)
L_market$Perioden <- as.integer(L_market$Perioden)
typeof(L_market$Perioden)
runApp()
runApp()
runApp()
